import { IntegerGenerator } from '../Generators/IntegerGenerator.js';

describe('IntegerGenerator', () => {

    let generator;

    beforeEach(() => {
        generator = new IntegerGenerator();
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    test('Should generate integers within the specified range', () => {
        // Generate a number
        const schema = { minimum: 10, maximum: 20 };
        const result = generator.Generate(schema);

        expect(result).toBeGreaterThanOrEqual(10);
        expect(result).toBeLessThanOrEqual(20);
        expect(Number.isInteger(result)).toBe(true);
    });

    test('Should return null for invalid range (minimum > maximum)', () => {
        // Generate a number
        const schema = { minimum: 20, maximum: 10 };
        const result = generator.Generate(schema);

        expect(result).toBeNull();
    });

    test('Should return integers using default min and max values if schema is empty', () => {
        // Generate a number
        const schema = {};
        const result = generator.Generate(schema);

        expect(Number.isInteger(result)).toBe(true);
    });

    test('should return null when schema contains non-numeric minimum and maximum', () => {

        // Generate a number
        const schema = { minimum: 'ten', maximum: 'twenty' };
        const result = generator.Generate(schema);

        expect(result).toBeNull();
    });

    test('Should handle scenarios where schema contains non-numeric values', () => {
        // Generate a number
        const schemaF = { minimum: "ten", maximum: 20 };
        const resultF = generator.Generate(schemaF);
        expect(resultF).toBeNull();

        // Generate a number
        const schemaS = { minimum: 10, maximum: "twenty" };
        const resultS = generator.Generate(schemaS);
        expect(resultS).toBeNull();
    });

    test('should return null when minimum and maximum are equal', () => {
        // Generate a number
        const schema = { minimum: 30, maximum: 30 };
        const result = generator.Generate(schema);

        expect(result).toBeNull();
    });

    test('Should round floating-point numbers generated by the parent class', () => {
        // Generate a number
        const schema = { minimum: 0, maximum: 1 };
        const result = generator.Generate(schema);

        expect(Number.isInteger(result)).toBe(true);
    });
});
