import { IntegerGenerator } from '../Generators/IntegerGenerator.js';

// The IntegerGenerator class is tested.
// Checks that with a valid schema the method returns integers between minimum and maximum.
// Checks that null is returned if minimum > maximum.
// Checks that the method works correctly with an empty schema object, using default values ​​from the parent class NumberGenerator.
// Checks that the method returns null if the input data is invalid.
// Checks that IntegerGenerator correctly rounds the values ​​generated by NumberGenerator.

describe('IntegerGenerator', () => {

    let generator;

    beforeEach(() => {
        // Create a new instance of IntegerGenerator before each test
        generator = new IntegerGenerator();
    });

    afterEach(() => {
        // Clear all mock calls between tests
        jest.clearAllMocks();
    });

    // Test correct integer generation with correct range
    test('Should generate integers within the specified range', () => {
        // Generate a number
        const schema = { minimum: 10, maximum: 20 };
        const result = generator.Generate(schema);

        expect(result).toBeGreaterThanOrEqual(10);
        expect(result).toBeLessThanOrEqual(20);
        expect(Number.isInteger(result)).toBe(true);
    });

    // Test correct integer generation with uncorrect range. Expected result is null
    test('Should return null for invalid range (minimum > maximum)', () => {
        // Generate a number
        const schema = { minimum: 20, maximum: 10 };
        const result = generator.Generate(schema);

        expect(result).toBeNull();
    });

    // Test correct integer generation with default range
    test('Should return integers using default min and max values if schema is empty', () => {
        // Generate a number
        const schema = {};
        const result = generator.Generate(schema);

        expect(Number.isInteger(result)).toBe(true);
    });

    // Test correct integer generation with uncorrect minimum and maximum. Expected result is null
    test('should return null when schema contains non-numeric minimum and maximum', () => {

        // Generate a number
        const schema = { minimum: 'ten', maximum: 'twenty' };
        const result = generator.Generate(schema);

        expect(result).toBeNull();
    });

    // Test correct integer generation with uncorrect minimum or maximum. Expected result is null
    test('Should handle scenarios where schema contains non-numeric values', () => {
        // Generate a number
        const schemaF = { minimum: "ten", maximum: 20 };
        const resultF = generator.Generate(schemaF);
        expect(resultF).toBeNull();

        // Generate a number
        const schemaS = { minimum: 10, maximum: "twenty" };
        const resultS = generator.Generate(schemaS);
        expect(resultS).toBeNull();
    });

    // Test correct integer generation with the same parameters minimum and maximum. Expected result is value equal to minimum and maximum
    test('should return value equal to minimum and maximum when minimum and maximum are equal', () => {
        // Generate a number
        const schema = { minimum: 30, maximum: 30 };
        const result = generator.Generate(schema);

        expect(result).toBe(30);
    });

    // Test correct integer rounding
    test('Should round floating-point numbers generated by the parent class', () => {
        // Generate a number
        const schema = { minimum: 0, maximum: 1 };
        const result = generator.Generate(schema);

        expect(Number.isInteger(result)).toBe(true);
    });
});
